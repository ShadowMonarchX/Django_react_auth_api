# Generated by Django 5.1.6 on 2025-02-25 11:17
from django.db import migrations, connection
import os
from django.conf import settings
from django.db.utils import IntegrityError, OperationalError


def seed_data(apps, schema_editor):
    sql_dir = os.path.join(settings.BASE_DIR, "MYSQL")
    
    if os.path.exists(sql_dir) and os.path.isdir(sql_dir):
        sql_files = ["country.sql", "state.sql", "city.sql"]
        sql_files = [os.path.join(sql_dir, f) for f in sql_files if os.path.exists(os.path.join(sql_dir, f))]
        
        for sql_file_path in sql_files:
            try:
                with open(sql_file_path, 'r') as file:
                    sql_commands = file.read()

                if sql_commands.strip():
                    with connection.cursor() as cursor:
                        for command in sql_commands.split(";"):
                            clean_command = command.strip()
                            if clean_command:
                                if "INSERT INTO" in clean_command.upper():
                                    modified_command = clean_command.replace("INSERT INTO", "INSERT IGNORE INTO")
                                    cursor.execute(modified_command)
                                else:
                                    cursor.execute(clean_command)

                    print(f"Successfully executed: {sql_file_path}")

            except IntegrityError as e:
                print(f"IntegrityError in {sql_file_path}: {e}")
            except OperationalError as e:
                print(f"OperationalError in {sql_file_path}: {e}")
            except Exception as e:
                print(f"Error executing {sql_file_path}: {e}")

    else:
        print("SQL directory not found or empty!")


class Migration(migrations.Migration):
    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(seed_data),
    ]
